MINISHELL TODO LIST - Separated Concerns Architecture
=======================================================

üî§ LEXER (TOKENIZER) - "What are the symbols?"
=====================================================
‚úÖ [COMPLETED] Basic token types (WORD, PIPE, REDIRECT_IN, REDIRECT_OUT, APPEND, HEREDOC)
‚úÖ [COMPLETED] Quote handling (single and double quotes) with type differentiation
‚úÖ [COMPLETED] Whitespace skipping
‚úÖ [COMPLETED] Multi-character operators (>>, <<)
‚úÖ [COMPLETED] Error handling for unclosed quotes
‚úÖ [COMPLETED] Arena-based memory management for tokenization

üîß [TODO] Enhanced error reporting
    - Add line/column tracking for better error messages
    - Add token position information

üîß [TODO] Wildcard detection
    - Add TOKEN_WILDCARD for * symbol
    - Mark tokens that contain wildcards for later expansion

üå≥ PARSER - "What's the command structure?"
==========================================
‚úÖ [COMPLETED] Command structure creation
    - Implement parse_commands() to convert tokens to t_command list
    - Handle simple commands: cmd arg1 arg2
    - Handle pipelines: cmd1 | cmd2 | cmd3
‚úÖ [COMPLETED] Arena-based memory for command tables
    - Command table built using arena allocation
    - Reset between commands for memory efficiency

‚úÖ [COMPLETED] Redirection parsing
    - Parse input redirection: < file
    - Parse output redirection: > file  
    - Parse append redirection: >> file
    - Parse heredoc: << delimiter

‚úÖ [COMPLETED] Quote removal and variable expansion
    - Remove quotes from WORD tokens that were quoted
    - Preserve literal values inside quotes
    - Expand variables ($VAR) based on quote context
    - Different behavior for single vs double quotes

‚úÖ [COMPLETED] Syntax validation
    - Check for invalid pipe usage (pipe at start/end, double pipes)
    - Check for invalid redirections (missing filenames)
    - Check for proper command structure (maybe in built-ins, otherwise let's leave it to execve :D)
    - Check for & standalone

üîß [TODO] Logical operators parsing
    - Parse && (AND) and || (OR) operators
    - Build command chains with conditional execution

üîß [TODO] Subshell parsing
    - Parse parentheses for subshell execution: (cmd1; cmd2)
    - Handle nested subshells

üîß [TODO] Error recovery
    - Provide meaningful syntax error messages
    - Implement error recovery strategies

‚ö° EXECUTOR - "How do I run this?"
=================================
‚úÖ [COMPLETED] Built-in command recognition
    - is_builtin() function implemented
    - Builtin dispatch system working (exe_builtin())
    - Non-forkable builtin detection (cd, exit, export, unset)

‚úÖ [COMPLETED] Redirection handling for builtins
    - dispatch_builtin() implemented
    - Fork when needed for builtins with redirections
    - Proper handling of non-forkable builtins (cd, exit, export, unset)

‚úÖ [COMPLETED] Basic redirection infrastructure
    - setup_redirections() implemented in redirection.c
    - handle_input_redirection() for < (WORKING)
    - handle_output_redirection() for > and >> (WORKING)
    - File opening with proper flags and permissions

üîß [CRITICAL] Built-in implementations - NEEDS FIXES
    ‚ö†Ô∏è  builtin_echo(): PARTIAL - Only handles single -n flag, needs multiple flag support
    ‚ö†Ô∏è  builtin_cd(): BASIC - Works for paths, missing HOME and OLDPWD (cd -, cd with no args)
    ‚úÖ builtin_pwd(): WORKING - Correctly implemented
    ‚úÖ builtin_env(): WORKING - Prints environment variables
    ‚ö†Ô∏è  builtin_exit(): BASIC - Works but needs exit code validation and error handling
    üîß [TODO] builtin_export(): Not implemented yet
    üîß [TODO] builtin_unset(): Not implemented yet

‚úÖ [COMPLETED] External command execution infrastructure
    - PATH resolution implemented (path_utils.c)
    - Command searching in PATH directories
    - exe_single_cmd() dispatcher for single commands

üîß [TODO] External command execution
    - fork() and execve() for external programs
    - Handle command not found errors (exit 127)
    - Handle permission denied errors (exit 126)
    - Proper process management and exit status collection

üîß [TODO] Pipeline execution
    - Create pipes between commands
    - Handle multiple processes in pipeline
    - Wait for all processes and collect exit codes
    - Note: Currently shows "pipelines not yet implemented" message

üîß [TODO] Heredoc implementation
    - handle_heredoc() stub exists but not implemented
    - Read input until delimiter is found
    - Handle variable expansion in heredoc (if required)
    - Create temporary files or use pipes

üîß [TODO] Wildcard expansion
    - Use glob() function for * expansion
    - Handle no matches (return literal *)
    - Sort expanded filenames

üîß [TODO] Logical operators execution
    - Implement && (execute next only if current succeeds)
    - Implement || (execute next only if current fails)
    - Handle short-circuit evaluation

üîß [TODO] Signal handling
    - Handle Ctrl+C (SIGINT) - interrupt current command
    - Handle Ctrl+\ (SIGQUIT) - ignore in interactive mode
    - Handle Ctrl+D (EOF) - exit shell gracefully

üîß [TODO] Subshell execution
    - Create child process for subshell
    - Execute commands in isolated environment
    - Return subshell exit status

üîß [TODO] Error handling
    - Set $? exit status correctly
    - Handle command not found (127)
    - Handle permission denied (126)
    - Handle other execution errors

üõ†Ô∏è INFRASTRUCTURE & UTILITIES
=============================
‚úÖ [COMPLETED] Memory management
    - Implemented memory arena for efficient allocation
    - Arena-based string functions (ar_strdup, ar_substr, ar_strjoin, ar_split)
    - Auto-extending arena when needed
    - Memory alignment for optimal performance
    - Reset functionality for command-by-command reuse

‚úÖ [COMPLETED] Shell initialization
    - shell_init() and related infrastructure in shell_init.c
    - Shell structure management
    - Environment handling setup

‚úÖ [COMPLETED] Path utilities
    - Command resolution in PATH directories
    - Path searching and validation (path_utils.c)

‚úÖ [COMPLETED] Shell utilities
    - Helper functions in shell_tools.c and shell_utils.c
    - Command table management
    - Token processing utilities

üîß [TODO] Advanced features (bonus)
    - Command line editing with readline
    - Tab completion for commands/files
    - Prompt customization

üß™ TESTING & VALIDATION
=======================
‚úÖ [COMPLETED] Basic manual testing
    - Tokenizer tested with various inputs
    - Parser tested with command structures
    - Variable expansion tested

üîß [TODO] Unit tests
    - Test tokenizer edge cases
    - Test parser with complex command structures
    - Test each built-in command individually
    - Test redirection combinations

üîß [TODO] Integration tests
    - Test complete command execution flow
    - Test error handling and edge cases
    - Test memory management with valgrind
    - Test redirection + pipeline combinations

üîß [TODO] Comparison testing
    - Compare behavior with bash
    - Test subject requirements compliance
    - Test bonus features if implemented
    - Edge case validation

üìã CURRENT STATUS (Updated: October 5, 2025)
============================================
‚úÖ Tokenizer complete with arena memory management
‚úÖ Quote handling with type differentiation implemented  
‚úÖ Parser base functionality complete with arena memory
‚úÖ Memory arena infrastructure complete and integrated
‚úÖ Variable expansion with quote context awareness (expand_variable_name())
‚úÖ Redirection parsing (>, >>, <, <<) in parser
‚úÖ Redirection execution for input (<) and output (>, >>) - WORKING!
‚úÖ Built-in command framework with fork management
‚úÖ Path resolution system working (exe/path_utils.c)
‚úÖ Single command execution dispatcher
‚úÖ Development tooling enhanced (Makefile with valgrind/cppcheck)
‚ö†Ô∏è  Built-in commands: basic implementations exist, need enhancements
‚è≥ Heredoc execution (stub exists, not implemented)
‚è≥ Pipeline execution (recognized but not implemented)
‚è≥ External command execution (infrastructure ready, execution pending)

üéØ NEXT IMMEDIATE STEPS - UPDATED PRIORITIES
============================================
üö® CRITICAL (Complete Core Functionality):
1. Implement external command execution with fork/execve
2. Complete heredoc implementation (handle_heredoc())
3. Implement pipeline execution (execute_pipeline())

üî• HIGH PRIORITY (Enhance Built-ins):
4. Enhance builtin_cd() - Add HOME directory support (cd with no args)
5. Enhance builtin_cd() - Add OLDPWD support (cd -) and PWD updates
6. Enhance builtin_echo() - Handle multiple -n flags correctly
7. Enhance builtin_exit() - Add exit code validation and error handling

‚≠ê MEDIUM PRIORITY (Complete Built-ins):
8. Implement builtin_export() - Set/export environment variables
9. Implement builtin_unset() - Remove environment variables
10. Add error handling for command not found (exit 127)
11. Add error handling for permission denied (exit 126)

üí° POLISH & FEATURES:
12. Implement variable expansion for $? (exit status)
13. Add comprehensive error messages
14. Handle signal interrupts (Ctrl+C, Ctrl+\, Ctrl+D)
15. Advanced features and bonus items

üìù NOTES & INSIGHTS
===================
- Follow 42 Norm: functions ‚â§25 lines, ‚â§80 chars per line
- Add comprehensive comments for learning
- Test each component thoroughly before moving to next
- Keep clean separation between lexer/parser/executor
- Built-ins are recognized at EXECUTION time, not parsing time
- All command names are WORD tokens regardless of type (built-in vs external)
- Non-forkable builtins (cd, exit, export, unset) must run in parent process
- Forkable builtins (echo, pwd, env) can fork when redirections are needed

üîß DEVELOPMENT TOOLS:
- Enhanced Makefile with colored output and comprehensive targets
- Valgrind integration with file descriptor tracking (--track-fds=yes)
- Comprehensive cppcheck static analysis (--enable=all --inconclusive)
- Professional development workflow established

üß™ QUALITY ASSURANCE:
- Code structured with clear separation of concerns
- Memory management validated with arena system (no leaks detected)
- Redirection system tested and working for basic cases
- Variable expansion implemented with quote awareness

üìä PROJECT STATISTICS:
- Lexer/Parser: ~90% complete
- Executor: ~40% complete (basic framework + redirections done)
- Built-ins: ~50% complete (basic versions exist, need enhancements)
- Overall: ~60% complete

üöÄ Remember: "Make it work, make it right, make it fast!"
üí° Current Focus: Complete core execution (external commands, pipes, heredoc)
üéØ Next Phase: Polish built-ins and add comprehensive error handling
‚ú® Final Phase: Signal handling, bonus features, and extensive testing
